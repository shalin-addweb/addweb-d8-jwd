<?php
/*
 * Implementation of hook_menu().
 */
function jwd_workflow_menu()
{
  return array(
    'admin/structure/product-fields' => array(
      'title' => t('Product properties'),
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('administer taxonomy'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('jwd_workflow_form_product_fields_overview'),
      'file path' => drupal_get_path('module','taxonomy'),
      'file' => 'taxonomy.admin.inc',
    ),
    'admin/structure/product-fields/%taxonomy_term' => array(
      'title' => t('Product fields'),
      'access arguments' => array('administer taxonomy'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('jwd_workflow_form_product_fields_terms', 3),
      'file path' => drupal_get_path('module','taxonomy'),
      'file' => 'taxonomy.admin.inc',
    )
  );
}

/*
 * Implementation of hook_menu_local_tasks_alter().
 * Adds local links to taxonomy terms form.
 */
function jwd_workflow_menu_local_tasks_alter(&$data,$router_item,$router_path)
{
  // alter the add term link on a product_fields vocabulary overview
  if ($router_path=='admin/structure/product-fields') {
    $item = menu_get_item('admin/structure/taxonomy/product_fields/add');
    $item['title'] = t('Add field');
    if($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item
      );
    }
  } elseif ($router_path=='admin/structure/product-fields/%') {
    $parent_term_id = arg(3);

    $item = menu_get_item('admin/structure/taxonomy/product_fields/add');
    $item['title'] = t('Add option');
    // a parent term is given
    if($item['access']) {
      $item['path'].='/'.$parent_term_id;
      $item['href'].='/'.$parent_term_id;
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item
      );
    }
  }
}

/*
 * Returns parent term
 */
function jwd_workflow_get_parent_term_id()
{
  $args = arg();
  $last = $args[count($args)-1];
  if (is_numeric($last)) {
    return $last;
  } else {
    return NULL;
  }
}


/*
 * Product fields overview edit form
 */
function jwd_workflow_form_product_fields_overview($form,&$form_state)
{
  $vocabulary = taxonomy_vocabulary_load(2);
  $form = taxonomy_overview_terms($form,$form_state,$vocabulary);
  $form = jwd_workflow_alter_product_fields_overview_form($form,$form_state);
  return $form;
}

/*
 * Submit handler of product fields overview form
 */
function jwd_workflow_form_product_fields_overview_submit($form, &$form_state) {
  taxonomy_overview_terms_submit($form, $form_state);
}

function theme_jwd_workflow_form_product_fields_overview($variables)
{
  drupal_add_js(array('jwd_workflow'=>array('product_fields_overview' => TRUE)),'setting');
  drupal_add_js(drupal_get_path('module','jwd_workflow') . '/js/jwd_workflow.js');
  return theme_taxonomy_overview_terms($variables);
}

/*
 * Product fields terms edit form
 */
function jwd_workflow_form_product_fields_terms($form,&$form_state,$term)
{
  $vocabulary = taxonomy_vocabulary_load(2);
  $form = taxonomy_overview_terms($form,$form_state,$vocabulary);
  $form = jwd_workflow_alter_product_fields_overview_form($form,$form_state,$term);
  return $form;
}

/*
 * Submit handler of product fields terms form
 */
function jwd_workflow_form_product_fields_terms_submit($form, &$form_state) {
  taxonomy_overview_terms_submit($form, $form_state);
}

function theme_jwd_workflow_form_product_fields_terms($variables)
{
  drupal_add_js(array('jwd_workflow'=>array('product_fields_overview' => FALSE)),'setting');
  drupal_add_js(array('jwd_workflow'=>array('product_fields_parent' => jwd_workflow_get_parent_term_id())),'setting');
  drupal_add_js(drupal_get_path('module','jwd_workflow') . '/js/jwd_workflow.js');
  return theme_taxonomy_overview_terms($variables);
}

/*
 * Implementation of hook_form_[FORM ID]_alter().
 * Hides some elements in term edit form and sets some defaults.
 */
function jwd_workflow_form_taxonomy_form_term_alter(&$form,&$form_state)
{
  if (isset($form['#vocabulary']) && $form['#vocabulary']->machine_name=='product_fields') {
    jwd_workflow_alter_product_fields_term_form($form,$form_state);
  }
}

/*
 * Implementation of hook_form_FORM_ID_alter()
 */
function jwd_workflow_form_taxonomy_overview_terms_alter(&$form,&$form_state)
{
  if (isset($form['#vocabulary']) && strpos($form['#vocabulary']->machine_name,'produktkategorien_') !== FALSE) {
    jwd_workflow_alter_product_categories_overview_form($form,$form_state);
  }
}

/*
 * Removes first level terms from taxonomy terms form.
 */
function jwd_workflow_alter_product_fields_term_form(&$form,&$form_state)
{
  if (is_array($form['#term']) && isset($form['#term']['tid']) && $form['#term']['tid']!==NULL && !empty($form['#term']['parent'])) {
    $parent_term_id = $form['#term']['parent'][0];
  } else {
    $parent_term_id = jwd_workflow_get_parent_term_id();
  }
  //dsm($form);
  if ($parent_term_id!==NULL) {
    // set parent term
    $form['relations']['parent']['#type'] = 'hidden';
    $form['relations']['parent']['#value'] = $parent_term_id;

    $form['description']['#format'] = 'plain_text';
  } else {
    $form['description']['#format'] = 'plain_text';

    $form['relations']['parent']['#type'] = 'hidden';
    $form['relations']['parent']['#value'] = '0';
  }
}

/*
 * Removes second level terms from taxonomy terms form.
 */
function jwd_workflow_alter_product_fields_overview_form(&$form,&$form_state,$parent_term = NULL)
{
  if ($parent_term !== NULL) {
    $parent_term_id = $parent_term->tid;
  } else {
    $parent_term_id = NULL;
  }

  if ($parent_term_id !== NULL) {
    $form['back'] = array(
      '#type'=>'link',
      '#title'=>t('Back'),
      '#href'=>'admin/structure/product-fields'
    );

    foreach($form as $name => &$data) {
      if (substr($name,0,1)!='#' && substr($name,0,3)=='tid') { // term foud
        if ($data['#term']['parent']==$parent_term_id) { // found child term

        } else { // some other term found
          //$form[$name]['#type'] = 'hidden';
          //unset($form[$name]); // so remove it
        }
      }
    }
  } else {
    foreach($form as $name => &$data) {
      if (substr($name,0,1)!='#' && substr($name,0,3)=='tid') { // term foud
        if ($data['#term']['parent']!='0') { // child term found
          // fake the child term in the form state to prevent errors within taxonomy.admin.inc
          //$form_state['input'][$name] = $data;
          //unset($form[$name]); // remove child terms
        } else { // parent term found
          // set human readable name from description
          //$data['view']['#title'] = $data['#term']['description'];
          // manipulate the view link
          $data['view']['#href'] = 'admin/structure/product-fields/'.$data['#term']['tid'];
        }
      }
    }
  }

  return $form;
}

function jwd_workflow_alter_product_categories_overview_form(&$form,$form_state)
{
  foreach($form as $key => $value) {
    if (is_array($value) && isset($value['#term'])) {
      $view = $value['view'];
      $form[$key]['view'] = array(
        '#type' => 'container',
        'link' => $view,
        'product_url' => array(
          '#type' => 'markup',
          '#markup' => '<span style="margin-left:4em;">'.t('Path').': produkte/kategorie/'.$value['#term']['tid'].'</span>'
        )
      );
    }
  }
}

/*
 * Implementation of hook_block_info().
 */
function jwd_workflow_block_info()
{
  return array(
    'jwd_workflow_products' => array(
      'info' => 'JWD Workflow: '.t('Products'),
      'cache' => DRUPAL_CACHE_GLOBAL
    ),
    'jwd_workflow_various' => array(
      'info' => 'JWD Workflow: '.t('Various'),
      'cache' => DRUPAL_CACHE_GLOBAL
    ),
    'jwd_workflow_content' => array(
      'info' => 'JWD Workflow: '.t('Content'),
      'cache' => DRUPAL_CACHE_GLOBAL
    ),
    'jwd_workflow_header' => array(
      'info' => 'JWD Workflow: '.t('Header'),
      'cache' => DRUPAL_CACHE_GLOBAL
    )
  );
}

/*
 * Implementation of hook_block_view().
 */
function jwd_workflow_block_view($delta = '')
{
  $block = array();

  switch($delta) {
    case 'jwd_workflow_products':
      $block['subject'] = t('Products');
      $block['content'] = "<ul>
        <li>" . l("neues Produkt","admin/commerce/products/add/jwd-product",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("neues Paket","admin/commerce/products/add/jwd-product-bundle",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("neue Produktansicht","node/add/jwd-product-display",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("neue Paketansicht","node/add/jwd-product-bundle-display",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("Produkteigenschaften bearbeiten","admin/structure/product-fields") . "</li>
      </ul>
      <h4>Gesobau</h4>
      <ul>
        <li>" . l("neues Gesobauprodukt","admin/commerce/products/add/jwd-gesobau-product",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("neue Gesobauproduktansicht","node/add/jwd-gesobau-product-display",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("Gesobau Produktkategorien bearbeiten","admin/structure/taxonomy/produktkategorien_gesobau") . "</li>
      </ul>
      <h4>Bestandskunden</h4>
      <ul>
        <li>" . l("neue Kostenstelle","node/add/jwd-kostenstelle",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("neue Lieferadresse","node/add/jwd-delivery-returning-customers",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("Produkteigenschaften bearbeiten", "admin/config/content/properties", array("query"=>drupal_get_destination())) . "</li>
      </ul>";
      break;
    case 'jwd_workflow_various':
      $block['subject'] = t('Various');
      $block['content'] = "<ul>
        <li>" . l("Men√º bearbeiten","admin/structure/menu/manage/main-menu") . "</li>
        <li>" . l("Gesobau Men√º bearbeiten","admin/structure/menu/manage/menu-gesobau") . "</li>
        <li>" . l("Kontakblock bearbeiten","admin/structure/block/manage/jwd_custom/contact/configure",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("√ñffnungszeiten bearbeiten","admin/structure/block/manage/jwd_custom/opening_hours/configure",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("Aktuelles Angebot bearbeiten","admin/structure/block/manage/jwd_custom/current_offer/configure",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("Resultate Kontaktformular","node/93/webform-results",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("JWD Nutzer","admin/jwd-users",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l('Produktberichte', "admin/commerce/reports/products", array("query"=>drupal_get_destination())) . "</li>
      </ul>";
      break;

    case 'jwd_workflow_content':
      $block['subject'] = t('Content');
      $block['content'] = "<ul>
        <li>" . l("Inhalte","admin/jwd-content") . "</li>
        <li>" . l("Seiten bearbeiten","admin/structure/pages") . "</li>
        <li>" . l("neuer Partner","node/add/jwd-affiliate",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("neue Referenz","node/add/jwd-reference",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("neuer Blogeintrag","node/add/jwd-blogpost",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("neue Frage und Antwort","node/add/jwd-faq",array("query"=>drupal_get_destination())) . "</li>
      </ul>";
      break;

    case 'jwd_workflow_header':
      $block['subject'] = t('Header');
      $block['content'] = "<ul>
        <li>" . l("Teambild bearbeiten","admin/structure/block/manage/jwd_custom/team/configure",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("Anfahrt bearbeiten","admin/structure/block/manage/jwd_custom/contact_map/configure",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("Kontakformularbild bearbeiten","admin/structure/block/manage/jwd_custom/contact_form/configure",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("Impressum bearbeiten","admin/structure/block/manage/jwd_custom/imprint/configure",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("AGBs bearbeiten","admin/structure/block/manage/jwd_custom/legacy/configure",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("Suche bearbeiten","admin/structure/block/manage/jwd_custom/search/configure",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("Partner bearbeiten","admin/structure/block/manage/jwd_custom/affiliates/configure",array("query"=>drupal_get_destination())) . "</li>
        <li>" . l("Fragen und Antworten bearbeiten","admin/structure/block/manage/jwd_custom/faq/configure",array("query"=>drupal_get_destination())) . "</li>
      </ul>";
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function jwd_workflow_theme() {
  return array(
    'jwd_workflow_form_product_fields_overview' => array(
      'render element' => 'form',
    ),
    'jwd_workflow_form_product_fields_terms' => array(
      'render element' => 'form',
    )
  );
}

/*
 * Implementation of hook_form_FORM_ID_alter().
 */
function jwd_workflow_form_textblock_node_form_alter(&$form,&$form_state)
{
  // remove image when in frontend and ajax mode
  if(isset($form_state['input']['ajax_page_state']) && !empty($form_state['input']['ajax_page_state'])) {
    unset($form['field_textblock_image']);
    unset($form['field_textblock_image_align']);
    unset($form['field_textblock_image_format']);
    unset($form['#groups']['group_textblock_image']);
    unset($form['#fieldgroups']['group_textblock_image']);
    $form['#group_children']['field_textblock_image'] = NULL;
    $form['#group_children']['field_textblock_image_align'] = NULL;
    $form['#group_children']['field_textblock_image_format'] = NULL;
  }
  return $form;
}